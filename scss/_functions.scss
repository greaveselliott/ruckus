//$screen: "only screen";
//
//$landscape: "#{$screen} and (orientation: landscape)";
//$portrait: "#{$screen} and (orientation: portrait)";
//
//$small-up: $screen;
//$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})";
//
//$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})";
//$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})";
//
//$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})";
//$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})";
//
//$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})";
//$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})";
//
//$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})";
//$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})";

$respond-to-list:   "screen" $screen,
                    "landscape" $landscape,
                    "portrait" $portrait,
                    "small-up" $small-up,
                    "small-only" $small-only,
                    "medium-up" $medium-up,
                    "medium-only" $medium-only,
                    "large-up" $large-up,
                    "large-only" $large-only,
                    "xlarge-up" $xlarge-up,
                    "xxlarge-only" $xxlarge-only,
                    "xxlarge-up" $xxlarge-up,
                    "xxlarge-only" $xxlarge-only;

@mixin respond-to ($type) {
  //@each $screen-type in $respond-to-list {
    @if $type == screen {
      @media #{$screen}{
        @content;
      }
    }
  @if $type == landscape {
    @media #{$landscape}{
      @content;
    }
  }
  @if $type == portrait {
    @media #{$portrait}{
      @content;
    }
  }
  @if $type == small-up {
    @media #{$small-up}{
      @content;
    }
  }
  @if $type == small-only {
    @media #{$small-only}{
      @content;
    }
  }
  @if $type == medium-up {
    @media #{$medium-up}{
      @content;
    }
  }
  @if $type == medium-only {
    @media #{$medium-only}{
      @content;
    }
  }
  @if $type == large-up {
    @media #{$large-up}{
      @content;
    }
  }
  @if $type == large-only {
    @media #{$large-only}{
      @content;
    }
  }
  @if $type == xlarge-up {
    @media #{$xlarge-up}{
      @content;
    }
  }
  @if $type == xlarge-only {
    @media #{$xlarge-only}{
      @content;
    }
  }
  @if $type == xxlarge-up {
    @media #{$xxlarge-up}{
      @content;
    }
  }
  @if $type == xxlarge-only {
    @media #{$xxlarge-only}{
      @content;
    }
  }
  //}
}
// creates properties specific to each responsive
@mixin responsive_property($selector) {
  .#{$selector}{
    @content;
  }
  @each $i in $respond-to-list {
    @include respond-to(#{nth($i,1)}){
      .#{$selector}-#{nth($i,1)} {
        @content;
      }
    }
  }
}

@function convert-to-vw ($value, $base-value: $rem-base){
  $value: strip-unit($value) / strip-unit($base-value) * 1vw;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function vw-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-vw(nth($values, 1), $base-value); }

  $vwValues: ();
  @for $i from 1 through $max {
    $remValues: append($vwValues, convert-to-vw(nth($values, $i), $base-value));
  }
  @return $vwValues;
}
